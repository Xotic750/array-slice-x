{"version":3,"sources":["../src/array-slice-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,WAAP,MAAwB,cAAxB;AACA,OAAO,OAAP,MAAoB,YAApB;AACA,OAAO,cAAP,MAA2B,oBAA3B;AACA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,QAAP,MAAqB,WAArB;AAEA,IAAM,WAAW,GAAG,GAAG,KAAvB;AAEA,IAAM,WAAW,GAAG,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,EAAwB,WAAxB,EAAqC,CAArC,EAAwC,CAAxC,CAAH,GAAgD,IAA/E;AACA,IAAM,SAAS,GAAG,WAAW,GACzB,WAAW,CAAC,KAAZ,IAAqB,OAAO,CAAC,WAAW,CAAC,KAAb,CAAP,KAA+B,KAApD,IAA6D,WAAW,CAAC,KAAZ,CAAkB,MAAlB,KAA6B,CAA1F,IAA+F,WAAW,CAAC,KAAZ,CAAkB,CAAlB,MAAyB,CAD/F,GAEzB,KAFJ;AAIA,IAAM,YAAY,GAAG,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,WAApB,EAAiC,CAAjC,EAAoC,CAApC,CAAH,GAA4C,IAA5E;AACA,IAAM,UAAU,GAAG,YAAY,GAC3B,YAAY,CAAC,KAAb,IACA,OAAO,CAAC,YAAY,CAAC,KAAd,CAAP,KAAgC,KADhC,IAEA,YAAY,CAAC,KAAb,CAAmB,MAAnB,KAA8B,CAF9B,IAGA,YAAY,CAAC,KAAb,CAAmB,CAAnB,MAA0B,GAJC,GAK3B,KALJ;AAOA,IAAM,GAAG,GAAG,OAAO,QAAP,KAAoB,WAApB,IAAmC,QAA/C;AACA,IAAM,gBAAgB,GAAG,WAAW,IAAI,GAAf,GAAqB,OAAO,CAAC,IAAR,CAAa,GAAG,CAAC,eAAjB,EAAkC,WAAlC,EAA+C,KAApE,GAA4E,IAArG;AACA,IAAM,OAAO,GAAG,gBAAgB,GAAG,gBAAgB,CAAC,KAApB,GAA4B,KAA5D;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAM,KAAK,GAAG,SAAS,KAAT,CAAe,KAAf,EAAsB,KAAtB,EAA6B,GAA7B,EAAkC;AAC9C,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAD,CAAvB;;AAEA,MAAI,SAAS,IAAK,OAAO,IAAI,OAAO,CAAC,MAAD,CAAP,KAAoB,KAA7C,IAAwD,UAAU,IAAI,QAAQ,CAAC,MAAD,CAA9E,IAA2F,WAAW,CAAC,MAAD,CAA1G,EAAoH;AAClH,WAAO,cAAc,CAAC,MAAD,EAAS,KAAT,EAAgB,GAAhB,CAArB;AACD;AAED;;;AACA,SAAO,WAAW,CAAC,KAAZ,CAAkB,MAAlB,EAA0B,cAAc,CAAC,SAAD,EAAY,CAAZ,CAAxC,CAAP;AACD,CATD;;AAWA,eAAe,KAAf","file":"array-slice-x.esm.js","sourcesContent":["import toObject from 'to-object-x';\nimport isArguments from 'is-arguments';\nimport isArray from 'is-array-x';\nimport arrayLikeSlice from 'array-like-slice-x';\nimport attempt from 'attempt-x';\nimport isString from 'is-string';\n\nconst nativeSlice = [].slice;\n\nconst resultArray = nativeSlice ? attempt.call([1, 2, 3], nativeSlice, 1, 2) : null;\nconst failArray = resultArray\n  ? resultArray.threw || isArray(resultArray.value) === false || resultArray.value.length !== 1 || resultArray.value[0] !== 2\n  : false;\n\nconst resultString = nativeSlice ? attempt.call('abc', nativeSlice, 1, 2) : null;\nconst failString = resultString\n  ? resultString.threw ||\n    isArray(resultString.value) === false ||\n    resultString.value.length !== 1 ||\n    resultString.value[0] !== 'b'\n  : false;\n\nconst doc = typeof document !== 'undefined' && document;\nconst resultDocElement = nativeSlice && doc ? attempt.call(doc.documentElement, nativeSlice).threw : null;\nconst failDOM = resultDocElement ? resultDocElement.threw : false;\n\n/**\n * The slice() method returns a shallow copy of a portion of an array into a new\n * array object selected from begin to end (end not included). The original\n * array will not be modified.\n *\n * @param {Array|object} array - The array to slice.\n * @param {number} [start] - Zero-based index at which to begin extraction.\n *  A negative index can be used, indicating an offset from the end of the\n *  sequence. Running slice(-2) extracts the last two elements in the sequence.\n *  If begin is undefined, slice begins from index 0.\n * @param {number} [end] - Zero-based index before which to end extraction.\n *  Slice extracts up to but not including end. For example, slice(1,4)\n *  extracts the second element through the fourth element (elements indexed\n *  1, 2, and 3).\n *  A negative index can be used, indicating an offset from the end of the\n *  sequence. Running slice(2,-1) extracts the third element through the second-to-last\n *  element in the sequence.\n *  If end is omitted, slice extracts through the end of the\n *  sequence (arr.length).\n *  If end is greater than the length of the sequence, slice extracts through\n *  the end of the sequence (arr.length).\n * @returns {Array} A new array containing the extracted elements.\n */\nconst slice = function slice(array, start, end) {\n  const object = toObject(array);\n\n  if (failArray || (failDOM && isArray(object) === false) || (failString && isString(object)) || isArguments(object)) {\n    return arrayLikeSlice(object, start, end);\n  }\n\n  /* eslint-disable-next-line prefer-rest-params */\n  return nativeSlice.apply(object, arrayLikeSlice(arguments, 1));\n};\n\nexport default slice;\n"]}